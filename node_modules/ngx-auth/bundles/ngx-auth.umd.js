(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('rxjs/operators'), require('@angular/common/http'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-auth', ['exports', '@angular/core', '@angular/router', 'rxjs/operators', '@angular/common/http', 'rxjs'], factory) :
    (factory((global['ngx-auth'] = {}),global.ng.core,global.ng.router,global.rxjs.operators,global.ng.common.http,global.rxjs));
}(this, (function (exports,core,router,operators,http,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Essential service for authentication
     * @abstract
     */
    var /**
     * Essential service for authentication
     * @abstract
     */ AuthService = /** @class */ (function () {
        function AuthService() {
        }
        return AuthService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var AUTH_SERVICE = new core.InjectionToken('AUTH_SERVICE');
    /** @type {?} */
    var PUBLIC_FALLBACK_PAGE_URI = new core.InjectionToken('PUBLIC_FALLBACK_PAGE_URI');
    /** @type {?} */
    var PROTECTED_FALLBACK_PAGE_URI = new core.InjectionToken('PROTECTED_FALLBACK_PAGE_URI');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Guard, checks access token availability and allows or disallows access to page,
     * and redirects out
     *
     * usage: { path: 'test', component: TestComponent, canActivate: [ PublicGuard ] }
     *
     * @export
     */
    var PublicGuard = /** @class */ (function () {
        function PublicGuard(authService, protectedFallbackPageUri, router$$1) {
            this.authService = authService;
            this.protectedFallbackPageUri = protectedFallbackPageUri;
            this.router = router$$1;
        }
        /**
         * CanActivate handler
         */
        /**
         * CanActivate handler
         * @param {?} _route
         * @param {?} state
         * @return {?}
         */
        PublicGuard.prototype.canActivate = /**
         * CanActivate handler
         * @param {?} _route
         * @param {?} state
         * @return {?}
         */
            function (_route, state) {
                var _this = this;
                return this.authService.isAuthorized()
                    .pipe(operators.map(function (isAuthorized) {
                    if (isAuthorized && !_this.isProtectedPage(state)) {
                        _this.navigate(_this.protectedFallbackPageUri);
                        return false;
                    }
                    return true;
                }));
            };
        /**
         * CanActivateChild handler
         */
        /**
         * CanActivateChild handler
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        PublicGuard.prototype.canActivateChild = /**
         * CanActivateChild handler
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
            function (route, state) {
                return this.canActivate(route, state);
            };
        /**
         * Check, if current page is protected fallback page
         */
        /**
         * Check, if current page is protected fallback page
         * @param {?} state
         * @return {?}
         */
        PublicGuard.prototype.isProtectedPage = /**
         * Check, if current page is protected fallback page
         * @param {?} state
         * @return {?}
         */
            function (state) {
                return state.url === this.protectedFallbackPageUri;
            };
        /**
         * Navigate away from the app / path
         */
        /**
         * Navigate away from the app / path
         * @param {?} url
         * @return {?}
         */
        PublicGuard.prototype.navigate = /**
         * Navigate away from the app / path
         * @param {?} url
         * @return {?}
         */
            function (url) {
                if (url.startsWith('http')) {
                    window.location.href = url;
                }
                else {
                    this.router.navigateByUrl(url);
                }
            };
        PublicGuard.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PublicGuard.ctorParameters = function () {
            return [
                { type: AuthService, decorators: [{ type: core.Inject, args: [AUTH_SERVICE,] }] },
                { type: String, decorators: [{ type: core.Inject, args: [PROTECTED_FALLBACK_PAGE_URI,] }] },
                { type: router.Router }
            ];
        };
        return PublicGuard;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Guard, checks access token availability and allows or disallows access to page,
     * and redirects out
     *
     * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }
     *
     * @export
     */
    var ProtectedGuard = /** @class */ (function () {
        function ProtectedGuard(authService, publicFallbackPageUri, router$$1) {
            this.authService = authService;
            this.publicFallbackPageUri = publicFallbackPageUri;
            this.router = router$$1;
        }
        /**
         * CanActivate handler
         */
        /**
         * CanActivate handler
         * @param {?} _route
         * @param {?} state
         * @return {?}
         */
        ProtectedGuard.prototype.canActivate = /**
         * CanActivate handler
         * @param {?} _route
         * @param {?} state
         * @return {?}
         */
            function (_route, state) {
                var _this = this;
                return this.authService.isAuthorized()
                    .pipe(operators.map(function (isAuthorized) {
                    if (!isAuthorized && !_this.isPublicPage(state)) {
                        if (_this.authService.setInterruptedUrl) {
                            _this.authService.setInterruptedUrl(state.url);
                        }
                        _this.navigate(_this.publicFallbackPageUri);
                        return false;
                    }
                    return true;
                }));
            };
        /**
         * CanActivateChild handler
         */
        /**
         * CanActivateChild handler
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        ProtectedGuard.prototype.canActivateChild = /**
         * CanActivateChild handler
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
            function (route, state) {
                return this.canActivate(route, state);
            };
        /**
         * Check, if current page is public fallback page
         */
        /**
         * Check, if current page is public fallback page
         * @param {?} state
         * @return {?}
         */
        ProtectedGuard.prototype.isPublicPage = /**
         * Check, if current page is public fallback page
         * @param {?} state
         * @return {?}
         */
            function (state) {
                return state.url === this.publicFallbackPageUri;
            };
        /**
         * Navigate away from the app / path
         */
        /**
         * Navigate away from the app / path
         * @param {?} url
         * @return {?}
         */
        ProtectedGuard.prototype.navigate = /**
         * Navigate away from the app / path
         * @param {?} url
         * @return {?}
         */
            function (url) {
                if (url.startsWith('http')) {
                    window.location.href = url;
                }
                else {
                    this.router.navigateByUrl(url);
                }
            };
        ProtectedGuard.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ProtectedGuard.ctorParameters = function () {
            return [
                { type: AuthService, decorators: [{ type: core.Inject, args: [AUTH_SERVICE,] }] },
                { type: String, decorators: [{ type: core.Inject, args: [PUBLIC_FALLBACK_PAGE_URI,] }] },
                { type: router.Router }
            ];
        };
        return ProtectedGuard;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AuthInterceptor = /** @class */ (function () {
        function AuthInterceptor(injector) {
            this.injector = injector;
            /**
             * Is refresh token is being executed
             */
            this.refreshInProgress = false;
            /**
             * Notify all outstanding requests through this subject
             */
            this.refreshSubject = new rxjs.Subject();
        }
        /**
         * Intercept an outgoing `HttpRequest`
         */
        /**
         * Intercept an outgoing `HttpRequest`
         * @param {?} req
         * @param {?} delegate
         * @return {?}
         */
        AuthInterceptor.prototype.intercept = /**
         * Intercept an outgoing `HttpRequest`
         * @param {?} req
         * @param {?} delegate
         * @return {?}
         */
            function (req, delegate) {
                if (this.skipRequest(req)) {
                    return delegate.handle(req);
                }
                return this.processIntercept(req, delegate);
            };
        /**
         * Process all the requests via custom interceptors.
         */
        /**
         * Process all the requests via custom interceptors.
         * @param {?} original
         * @param {?} delegate
         * @return {?}
         */
        AuthInterceptor.prototype.processIntercept = /**
         * Process all the requests via custom interceptors.
         * @param {?} original
         * @param {?} delegate
         * @return {?}
         */
            function (original, delegate) {
                var _this = this;
                /** @type {?} */
                var clone = original.clone();
                return this.request(clone)
                    .pipe(operators.switchMap(function (req) { return delegate.handle(req); }), operators.catchError(function (res) { return _this.responseError(clone, res); }));
            };
        /**
         * Request interceptor. Delays request if refresh is in progress
         * otherwise adds token to the headers
         */
        /**
         * Request interceptor. Delays request if refresh is in progress
         * otherwise adds token to the headers
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.request = /**
         * Request interceptor. Delays request if refresh is in progress
         * otherwise adds token to the headers
         * @param {?} req
         * @return {?}
         */
            function (req) {
                if (this.refreshInProgress) {
                    return this.delayRequest(req);
                }
                return this.addToken(req);
            };
        /**
         * Failed request interceptor, check if it has to be processed with refresh
         */
        /**
         * Failed request interceptor, check if it has to be processed with refresh
         * @param {?} req
         * @param {?} res
         * @return {?}
         */
        AuthInterceptor.prototype.responseError = /**
         * Failed request interceptor, check if it has to be processed with refresh
         * @param {?} req
         * @param {?} res
         * @return {?}
         */
            function (req, res) {
                var _this = this;
                /** @type {?} */
                var authService = this.injector.get(AUTH_SERVICE);
                /** @type {?} */
                var refreshShouldHappen = authService.refreshShouldHappen(res);
                if (refreshShouldHappen && !this.refreshInProgress) {
                    this.refreshInProgress = true;
                    authService
                        .refreshToken()
                        .subscribe(function () {
                        _this.refreshInProgress = false;
                        _this.refreshSubject.next(true);
                    }, function () {
                        _this.refreshInProgress = false;
                        _this.refreshSubject.next(false);
                    });
                }
                if (refreshShouldHappen && this.refreshInProgress) {
                    return this.retryRequest(req, res);
                }
                return rxjs.throwError(res);
            };
        /**
         * Add access token to headers or the request
         */
        /**
         * Add access token to headers or the request
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.addToken = /**
         * Add access token to headers or the request
         * @param {?} req
         * @return {?}
         */
            function (req) {
                /** @type {?} */
                var authService = this.injector.get(AUTH_SERVICE);
                return authService.getAccessToken()
                    .pipe(operators.map(function (token) {
                    if (token) {
                        /** @type {?} */
                        var setHeaders = void 0;
                        if (typeof authService.getHeaders === 'function') {
                            setHeaders = authService.getHeaders(token);
                        }
                        else {
                            setHeaders = { Authorization: "Bearer " + token };
                        }
                        return req.clone({ setHeaders: setHeaders });
                    }
                    return req;
                }), operators.first());
            };
        /**
         * Delay request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         */
        /**
         * Delay request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.delayRequest = /**
         * Delay request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         * @param {?} req
         * @return {?}
         */
            function (req) {
                var _this = this;
                return this.refreshSubject.pipe(operators.first(), operators.switchMap(function (status) {
                    return status ? _this.addToken(req) : rxjs.throwError(req);
                }));
            };
        /**
         * Retry request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         */
        /**
         * Retry request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         * @param {?} req
         * @param {?} res
         * @return {?}
         */
        AuthInterceptor.prototype.retryRequest = /**
         * Retry request, by subscribing on refresh event, once it finished, process it
         * otherwise throw error
         * @param {?} req
         * @param {?} res
         * @return {?}
         */
            function (req, res) {
                /** @type {?} */
                var http$$1 = this.injector.get(http.HttpClient);
                return this.refreshSubject.pipe(operators.first(), operators.switchMap(function (status) {
                    return status ? http$$1.request(req) : rxjs.throwError(res || req);
                }));
            };
        /**
         * Checks if request must be skipped by interceptor.
         */
        /**
         * Checks if request must be skipped by interceptor.
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.skipRequest = /**
         * Checks if request must be skipped by interceptor.
         * @param {?} req
         * @return {?}
         */
            function (req) {
                /** @type {?} */
                var skipRequest = this.exec('skipRequest', req);
                /** @type {?} */
                var verifyRefreshToken = this.exec('verifyRefreshToken', req);
                // deprecated, will be removed soon
                /** @type {?} */
                var verifyTokenRequest = this.exec('verifyTokenRequest', req.url);
                return skipRequest || verifyRefreshToken || verifyTokenRequest;
            };
        /**
         * Exec optional method, will be removed in upcoming updates.
         * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
         */
        /**
         * Exec optional method, will be removed in upcoming updates.
         * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
         * @param {?} method
         * @param {...?} args
         * @return {?}
         */
        AuthInterceptor.prototype.exec = /**
         * Exec optional method, will be removed in upcoming updates.
         * Temp method until `verifyTokenRequest` will be completely replaced with skipRequest
         * @param {?} method
         * @param {...?} args
         * @return {?}
         */
            function (method) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                /** @type {?} */
                var authService = this.injector.get(AUTH_SERVICE);
                if (typeof authService[method] === 'function') {
                    return authService[method].apply(authService, __spread(args));
                }
            };
        AuthInterceptor.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AuthInterceptor.ctorParameters = function () {
            return [
                { type: core.Injector }
            ];
        };
        return AuthInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AuthModule = /** @class */ (function () {
        function AuthModule() {
        }
        AuthModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            PublicGuard,
                            ProtectedGuard,
                            AuthInterceptor,
                            {
                                provide: http.HTTP_INTERCEPTORS,
                                useClass: AuthInterceptor,
                                multi: true,
                            }
                        ]
                    },] }
        ];
        return AuthModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.AuthService = AuthService;
    exports.PublicGuard = PublicGuard;
    exports.ProtectedGuard = ProtectedGuard;
    exports.AUTH_SERVICE = AUTH_SERVICE;
    exports.PUBLIC_FALLBACK_PAGE_URI = PUBLIC_FALLBACK_PAGE_URI;
    exports.PROTECTED_FALLBACK_PAGE_URI = PROTECTED_FALLBACK_PAGE_URI;
    exports.AuthModule = AuthModule;
    exports.ɵa = AuthInterceptor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWF1dGgudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtYXV0aC9hdXRoLnNlcnZpY2UudHMiLCJuZzovL25neC1hdXRoL3Rva2Vucy50cyIsIm5nOi8vbmd4LWF1dGgvcHVibGljLmd1YXJkLnRzIiwibmc6Ly9uZ3gtYXV0aC9wcm90ZWN0ZWQuZ3VhcmQudHMiLCJub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwibmc6Ly9uZ3gtYXV0aC9hdXRoLmludGVyY2VwdG9yLnRzIiwibmc6Ly9uZ3gtYXV0aC9hdXRoLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogRXNzZW50aWFsIHNlcnZpY2UgZm9yIGF1dGhlbnRpY2F0aW9uXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBdXRoU2VydmljZSB7XG5cbiAgLyoqXG4gICAqIENoZWNrLCBpZiB1c2VyIGFscmVhZHkgYXV0aG9yaXplZC5cbiAgICogU2hvdWxkIHJldHVybiBPYnNlcnZhYmxlIHdpdGggdHJ1ZSBvciBmYWxzZSB2YWx1ZXNcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBpc0F1dGhvcml6ZWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogR2V0IGFjY2VzcyB0b2tlblxuICAgKiBTaG91bGQgcmV0dXJuIGFjY2VzcyB0b2tlbiBpbiBPYnNlcnZhYmxlIGZyb20gZS5nLlxuICAgKiBsb2NhbFN0b3JhZ2VcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRBY2Nlc3NUb2tlbigpOiBPYnNlcnZhYmxlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uLCB0aGF0IHNob3VsZCBwZXJmb3JtIHJlZnJlc2ggdG9rZW5cbiAgICogU2hvdWxkIGJlIHN1Y2Nlc3NmdWxseSBjb21wbGV0ZWQgc28gaW50ZXJjZXB0b3JcbiAgICogY2FuIGV4ZWN1dGUgcGVuZGluZyByZXF1ZXN0cyBvciByZXRyeSBvcmlnaW5hbCBvbmVcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWZyZXNoVG9rZW4oKTogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiwgY2hlY2tzIHJlc3BvbnNlIG9mIGZhaWxlZCByZXF1ZXN0IHRvIGRldGVybWluZSxcbiAgICogd2hldGhlciB0b2tlbiBiZSByZWZyZXNoZWQgb3Igbm90LlxuICAgKlxuICAgKiBFc3NlbnRpYWxseSBjaGVja3Mgc3RhdHVzXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVmcmVzaFNob3VsZEhhcHBlbihyZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBWZXJpZnkgdGhhdCBvdXRnb2luZyByZXF1ZXN0IGlzIHJlZnJlc2gtdG9rZW4sXG4gICAqIHNvIGludGVyY2VwdG9yIHdvbid0IGludGVyY2VwdCB0aGlzIHJlcXVlc3RcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB2ZXJpZnlSZWZyZXNoVG9rZW4/KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcmVxdWVzdCBtdXN0IGJlIHNraXBwZWQgYnkgaW50ZXJjZXB0b3IuXG4gICAqIFVzZWZ1bCBmb3IgcmVxdWVzdHMgc3VjaCBhcyByZXF1ZXN0IHRva2VuIHdoaWNoIGRvZXNuJ3QgcmVxdWlyZSB0b2tlbiBpbiBoZWFkZXJzXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3Qgc2tpcFJlcXVlc3Q/KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBZGQgdG9rZW4gdG8gaGVhZGVycywgZGVwZW5kZW50IG9uIHNlcnZlclxuICAgKiBzZXQtdXAsIGJ5IGRlZmF1bHQgYWRkcyBhIGJlYXJlciB0b2tlbi5cbiAgICogQ2FsbGVkIGJ5IGludGVyY2VwdG9yLlxuICAgKiBUbyBjaGFuZ2UgYmVoYXZpb3IsIG92ZXJyaWRlIHRoaXMgbWV0aG9kLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEhlYWRlcnM/KHRva2VuOiBzdHJpbmcpOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXSB9O1xuXG4gIC8qKlxuICAgKiBTYXZlcyBsYXN0IGludGVycnVwdGVkIHVybCBpbnNpZGUgb2YgdGhlIHNlcnZpY2UgZm9yIGZ1cnRoZXIgcmV1c2FnZSxcbiAgICogZS5nLiByZXN0b3JpbmcgaW50ZXJydXB0ZWQgcGFnZSBhZnRlciBsb2dnaW5nIGluXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3Qgc2V0SW50ZXJydXB0ZWRVcmw/KHVybDogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogVmVyaWZ5IHRoYXQgb3V0Z29pbmcgcmVxdWVzdCBpcyByZWZyZXNoLXRva2VuLFxuICAgKiBzbyBpbnRlcmNlcHRvciB3b24ndCBpbnRlcmNlcHQgdGhpcyByZXF1ZXN0XG4gICAqIEBkZXByZWNhdGVkIER1ZSB0byBpbGxvZ2ljYWwgbWVhbmluZy9mdW5jdGlvbmFsaXR5IHRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWRcbiAgICogQHNlZSB2ZXJpZnlSZWZyZXNoVG9rZW5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB2ZXJpZnlUb2tlblJlcXVlc3Q/KHVybDogc3RyaW5nKTogYm9vbGVhbjtcbn1cbiIsImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBBVVRIX1NFUlZJQ0UgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0FVVEhfU0VSVklDRScpO1xuZXhwb3J0IGNvbnN0IFBVQkxJQ19GQUxMQkFDS19QQUdFX1VSSSA9IG5ldyBJbmplY3Rpb25Ub2tlbignUFVCTElDX0ZBTExCQUNLX1BBR0VfVVJJJyk7XG5leHBvcnQgY29uc3QgUFJPVEVDVEVEX0ZBTExCQUNLX1BBR0VfVVJJID0gbmV3IEluamVjdGlvblRva2VuKCdQUk9URUNURURfRkFMTEJBQ0tfUEFHRV9VUkknKTtcbiIsImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ2FuQWN0aXZhdGUsXG4gIENhbkFjdGl2YXRlQ2hpbGQsXG4gIFJvdXRlcixcbiAgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgUm91dGVyU3RhdGVTbmFwc2hvdFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4vYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IEFVVEhfU0VSVklDRSwgUFJPVEVDVEVEX0ZBTExCQUNLX1BBR0VfVVJJIH0gZnJvbSAnLi90b2tlbnMnO1xuXG4vKipcbiAqIEd1YXJkLCBjaGVja3MgYWNjZXNzIHRva2VuIGF2YWlsYWJpbGl0eSBhbmQgYWxsb3dzIG9yIGRpc2FsbG93cyBhY2Nlc3MgdG8gcGFnZSxcbiAqIGFuZCByZWRpcmVjdHMgb3V0XG4gKlxuICogdXNhZ2U6IHsgcGF0aDogJ3Rlc3QnLCBjb21wb25lbnQ6IFRlc3RDb21wb25lbnQsIGNhbkFjdGl2YXRlOiBbIFB1YmxpY0d1YXJkIF0gfVxuICpcbiAqIEBleHBvcnRcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFB1YmxpY0d1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoQVVUSF9TRVJWSUNFKSBwcml2YXRlIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSxcbiAgICBASW5qZWN0KFBST1RFQ1RFRF9GQUxMQkFDS19QQUdFX1VSSSkgcHJpdmF0ZSBwcm90ZWN0ZWRGYWxsYmFja1BhZ2VVcmk6IHN0cmluZyxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyXG4gICkge31cblxuICAvKipcbiAgICogQ2FuQWN0aXZhdGUgaGFuZGxlclxuICAgKi9cbiAgcHVibGljIGNhbkFjdGl2YXRlKFxuICAgIF9yb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5hdXRoU2VydmljZS5pc0F1dGhvcml6ZWQoKVxuICAgICAgLnBpcGUobWFwKChpc0F1dGhvcml6ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgaWYgKGlzQXV0aG9yaXplZCAmJiAhdGhpcy5pc1Byb3RlY3RlZFBhZ2Uoc3RhdGUpKSB7XG4gICAgICAgICAgdGhpcy5uYXZpZ2F0ZSh0aGlzLnByb3RlY3RlZEZhbGxiYWNrUGFnZVVyaSk7XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5BY3RpdmF0ZUNoaWxkIGhhbmRsZXJcbiAgICovXG4gIHB1YmxpYyBjYW5BY3RpdmF0ZUNoaWxkKFxuICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmNhbkFjdGl2YXRlKHJvdXRlLCBzdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2ssIGlmIGN1cnJlbnQgcGFnZSBpcyBwcm90ZWN0ZWQgZmFsbGJhY2sgcGFnZVxuICAgKi9cbiAgcHJpdmF0ZSBpc1Byb3RlY3RlZFBhZ2Uoc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc3RhdGUudXJsID09PSB0aGlzLnByb3RlY3RlZEZhbGxiYWNrUGFnZVVyaTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOYXZpZ2F0ZSBhd2F5IGZyb20gdGhlIGFwcCAvIHBhdGhcbiAgICovXG4gIHByaXZhdGUgbmF2aWdhdGUodXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAodXJsLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwodXJsKTtcbiAgICB9XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBSb3V0ZXIsXG4gIENhbkFjdGl2YXRlLFxuICBDYW5BY3RpdmF0ZUNoaWxkLFxuICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90XG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgQVVUSF9TRVJWSUNFLCBQVUJMSUNfRkFMTEJBQ0tfUEFHRV9VUkkgfSBmcm9tICcuL3Rva2Vucyc7XG5cbi8qKlxuICogR3VhcmQsIGNoZWNrcyBhY2Nlc3MgdG9rZW4gYXZhaWxhYmlsaXR5IGFuZCBhbGxvd3Mgb3IgZGlzYWxsb3dzIGFjY2VzcyB0byBwYWdlLFxuICogYW5kIHJlZGlyZWN0cyBvdXRcbiAqXG4gKiB1c2FnZTogeyBwYXRoOiAndGVzdCcsIGNvbXBvbmVudDogVGVzdENvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFsgQXV0aEd1YXJkIF0gfVxuICpcbiAqIEBleHBvcnRcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByb3RlY3RlZEd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoQVVUSF9TRVJWSUNFKXByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLFxuICAgIEBJbmplY3QoUFVCTElDX0ZBTExCQUNLX1BBR0VfVVJJKSBwcml2YXRlIHB1YmxpY0ZhbGxiYWNrUGFnZVVyaTogc3RyaW5nLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBDYW5BY3RpdmF0ZSBoYW5kbGVyXG4gICAqL1xuICBwdWJsaWMgY2FuQWN0aXZhdGUoXG4gICAgX3JvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmF1dGhTZXJ2aWNlLmlzQXV0aG9yaXplZCgpXG4gICAgICAucGlwZShtYXAoKGlzQXV0aG9yaXplZDogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAoIWlzQXV0aG9yaXplZCAmJiAhdGhpcy5pc1B1YmxpY1BhZ2Uoc3RhdGUpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuYXV0aFNlcnZpY2Uuc2V0SW50ZXJydXB0ZWRVcmwpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aFNlcnZpY2Uuc2V0SW50ZXJydXB0ZWRVcmwoc3RhdGUudXJsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm5hdmlnYXRlKHRoaXMucHVibGljRmFsbGJhY2tQYWdlVXJpKTtcblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbkFjdGl2YXRlQ2hpbGQgaGFuZGxlclxuICAgKi9cbiAgcHVibGljIGNhbkFjdGl2YXRlQ2hpbGQoXG4gICAgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuY2FuQWN0aXZhdGUocm91dGUsIHN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjaywgaWYgY3VycmVudCBwYWdlIGlzIHB1YmxpYyBmYWxsYmFjayBwYWdlXG4gICAqL1xuICBwcml2YXRlIGlzUHVibGljUGFnZShzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzdGF0ZS51cmwgPT09IHRoaXMucHVibGljRmFsbGJhY2tQYWdlVXJpO1xuICB9XG5cbiAgLyoqXG4gICAqIE5hdmlnYXRlIGF3YXkgZnJvbSB0aGUgYXBwIC8gcGF0aFxuICAgKi9cbiAgcHJpdmF0ZSBuYXZpZ2F0ZSh1cmw6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh1cmwuc3RhcnRzV2l0aCgnaHR0cCcpKSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh1cmwpO1xuICAgIH1cbiAgfVxuXG59XG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMClcclxuICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IHlbb3BbMF0gJiAyID8gXCJyZXR1cm5cIiA6IG9wWzBdID8gXCJ0aHJvd1wiIDogXCJuZXh0XCJdKSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFswLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyAgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKG9bbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH07IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl07XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBDbGllbnQsXG4gIEh0dHBFdmVudCxcbiAgSHR0cEludGVyY2VwdG9yLFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBFcnJvclJlc3BvbnNlXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgZmlyc3QsIHN3aXRjaE1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICcuL2F1dGguc2VydmljZSc7XG5pbXBvcnQgeyBBVVRIX1NFUlZJQ0UgfSBmcm9tICcuL3Rva2Vucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdXRoSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIC8qKlxuICAgKiBJcyByZWZyZXNoIHRva2VuIGlzIGJlaW5nIGV4ZWN1dGVkXG4gICAqL1xuICBwcml2YXRlIHJlZnJlc2hJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIE5vdGlmeSBhbGwgb3V0c3RhbmRpbmcgcmVxdWVzdHMgdGhyb3VnaCB0aGlzIHN1YmplY3RcbiAgICovXG4gIHByaXZhdGUgcmVmcmVzaFN1YmplY3Q6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7fVxuXG4gIC8qKlxuICAgKiBJbnRlcmNlcHQgYW4gb3V0Z29pbmcgYEh0dHBSZXF1ZXN0YFxuICAgKi9cbiAgcHVibGljIGludGVyY2VwdChcbiAgICByZXE6IEh0dHBSZXF1ZXN0PGFueT4sXG4gICAgZGVsZWdhdGU6IEh0dHBIYW5kbGVyXG4gICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBpZiAodGhpcy5za2lwUmVxdWVzdChyZXEpKSB7XG4gICAgICByZXR1cm4gZGVsZWdhdGUuaGFuZGxlKHJlcSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc0ludGVyY2VwdChyZXEsIGRlbGVnYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGFsbCB0aGUgcmVxdWVzdHMgdmlhIGN1c3RvbSBpbnRlcmNlcHRvcnMuXG4gICAqL1xuICBwcml2YXRlIHByb2Nlc3NJbnRlcmNlcHQoXG4gICAgb3JpZ2luYWw6IEh0dHBSZXF1ZXN0PGFueT4sXG4gICAgZGVsZWdhdGU6IEh0dHBIYW5kbGVyXG4gICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBjb25zdCBjbG9uZTogSHR0cFJlcXVlc3Q8YW55PiA9IG9yaWdpbmFsLmNsb25lKCk7XG5cbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGNsb25lKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgocmVxOiBIdHRwUmVxdWVzdDxhbnk+KSA9PiBkZWxlZ2F0ZS5oYW5kbGUocmVxKSksXG4gICAgICAgIGNhdGNoRXJyb3IoKHJlczogSHR0cEVycm9yUmVzcG9uc2UpID0+IHRoaXMucmVzcG9uc2VFcnJvcihjbG9uZSwgcmVzKSlcbiAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCBpbnRlcmNlcHRvci4gRGVsYXlzIHJlcXVlc3QgaWYgcmVmcmVzaCBpcyBpbiBwcm9ncmVzc1xuICAgKiBvdGhlcndpc2UgYWRkcyB0b2tlbiB0byB0aGUgaGVhZGVyc1xuICAgKi9cbiAgcHJpdmF0ZSByZXF1ZXN0KHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IE9ic2VydmFibGU8SHR0cFJlcXVlc3Q8YW55Pj4ge1xuICAgIGlmICh0aGlzLnJlZnJlc2hJblByb2dyZXNzKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxheVJlcXVlc3QocmVxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hZGRUb2tlbihyZXEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZhaWxlZCByZXF1ZXN0IGludGVyY2VwdG9yLCBjaGVjayBpZiBpdCBoYXMgdG8gYmUgcHJvY2Vzc2VkIHdpdGggcmVmcmVzaFxuICAgKi9cbiAgcHJpdmF0ZSByZXNwb25zZUVycm9yKFxuICAgIHJlcTogSHR0cFJlcXVlc3Q8YW55PixcbiAgICByZXM6IEh0dHBFcnJvclJlc3BvbnNlXG4gICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBjb25zdCBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UgPVxuICAgICAgdGhpcy5pbmplY3Rvci5nZXQ8QXV0aFNlcnZpY2U+KEFVVEhfU0VSVklDRSk7XG4gICAgY29uc3QgcmVmcmVzaFNob3VsZEhhcHBlbjogYm9vbGVhbiA9XG4gICAgICBhdXRoU2VydmljZS5yZWZyZXNoU2hvdWxkSGFwcGVuKHJlcyk7XG5cbiAgICBpZiAocmVmcmVzaFNob3VsZEhhcHBlbiAmJiAhdGhpcy5yZWZyZXNoSW5Qcm9ncmVzcykge1xuICAgICAgdGhpcy5yZWZyZXNoSW5Qcm9ncmVzcyA9IHRydWU7XG5cbiAgICAgIGF1dGhTZXJ2aWNlXG4gICAgICAgIC5yZWZyZXNoVG9rZW4oKVxuICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFN1YmplY3QubmV4dCh0cnVlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFN1YmplY3QubmV4dChmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChyZWZyZXNoU2hvdWxkSGFwcGVuICYmIHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldHJ5UmVxdWVzdChyZXEsIHJlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRocm93RXJyb3IocmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYWNjZXNzIHRva2VuIHRvIGhlYWRlcnMgb3IgdGhlIHJlcXVlc3RcbiAgICovXG4gIHByaXZhdGUgYWRkVG9rZW4ocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogT2JzZXJ2YWJsZTxIdHRwUmVxdWVzdDxhbnk+PiB7XG4gICAgY29uc3QgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0PEF1dGhTZXJ2aWNlPihBVVRIX1NFUlZJQ0UpO1xuXG4gICAgcmV0dXJuIGF1dGhTZXJ2aWNlLmdldEFjY2Vzc1Rva2VuKClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoKHRva2VuOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGxldCBzZXRIZWFkZXJzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXSB9O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGF1dGhTZXJ2aWNlLmdldEhlYWRlcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgc2V0SGVhZGVycyA9IGF1dGhTZXJ2aWNlLmdldEhlYWRlcnModG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2V0SGVhZGVycyA9IHsgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlcS5jbG9uZSh7IHNldEhlYWRlcnMgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlcTtcbiAgICAgICAgfSksXG4gICAgICAgIGZpcnN0KClcbiAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRGVsYXkgcmVxdWVzdCwgYnkgc3Vic2NyaWJpbmcgb24gcmVmcmVzaCBldmVudCwgb25jZSBpdCBmaW5pc2hlZCwgcHJvY2VzcyBpdFxuICAgKiBvdGhlcndpc2UgdGhyb3cgZXJyb3JcbiAgICovXG4gIHByaXZhdGUgZGVsYXlSZXF1ZXN0KHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IE9ic2VydmFibGU8SHR0cFJlcXVlc3Q8YW55Pj4ge1xuICAgIHJldHVybiB0aGlzLnJlZnJlc2hTdWJqZWN0LnBpcGUoXG4gICAgICBmaXJzdCgpLFxuICAgICAgc3dpdGNoTWFwKChzdGF0dXM6IGJvb2xlYW4pID0+XG4gICAgICAgIHN0YXR1cyA/IHRoaXMuYWRkVG9rZW4ocmVxKSA6IHRocm93RXJyb3IocmVxKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cnkgcmVxdWVzdCwgYnkgc3Vic2NyaWJpbmcgb24gcmVmcmVzaCBldmVudCwgb25jZSBpdCBmaW5pc2hlZCwgcHJvY2VzcyBpdFxuICAgKiBvdGhlcndpc2UgdGhyb3cgZXJyb3JcbiAgICovXG4gIHByaXZhdGUgcmV0cnlSZXF1ZXN0KFxuICAgIHJlcTogSHR0cFJlcXVlc3Q8YW55PixcbiAgICByZXM6IEh0dHBFcnJvclJlc3BvbnNlXG4gICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBjb25zdCBodHRwOiBIdHRwQ2xpZW50ID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0PEh0dHBDbGllbnQ+KEh0dHBDbGllbnQpO1xuXG4gICAgcmV0dXJuIHRoaXMucmVmcmVzaFN1YmplY3QucGlwZShcbiAgICAgIGZpcnN0KCksXG4gICAgICBzd2l0Y2hNYXAoKHN0YXR1czogYm9vbGVhbikgPT5cbiAgICAgICAgc3RhdHVzID8gaHR0cC5yZXF1ZXN0KHJlcSkgOiB0aHJvd0Vycm9yKHJlcyB8fCByZXEpXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcmVxdWVzdCBtdXN0IGJlIHNraXBwZWQgYnkgaW50ZXJjZXB0b3IuXG4gICAqL1xuICBwcml2YXRlIHNraXBSZXF1ZXN0KHJlcTogSHR0cFJlcXVlc3Q8YW55Pikge1xuICAgIGNvbnN0IHNraXBSZXF1ZXN0ID0gdGhpcy5leGVjKCdza2lwUmVxdWVzdCcsIHJlcSk7XG4gICAgY29uc3QgdmVyaWZ5UmVmcmVzaFRva2VuID0gdGhpcy5leGVjKCd2ZXJpZnlSZWZyZXNoVG9rZW4nLCByZXEpO1xuXG4gICAgLy8gZGVwcmVjYXRlZCwgd2lsbCBiZSByZW1vdmVkIHNvb25cbiAgICBjb25zdCB2ZXJpZnlUb2tlblJlcXVlc3QgPSB0aGlzLmV4ZWMoJ3ZlcmlmeVRva2VuUmVxdWVzdCcsIHJlcS51cmwpO1xuXG4gICAgcmV0dXJuIHNraXBSZXF1ZXN0IHx8IHZlcmlmeVJlZnJlc2hUb2tlbiB8fCB2ZXJpZnlUb2tlblJlcXVlc3Q7XG4gIH1cblxuICAvKipcbiAgICogRXhlYyBvcHRpb25hbCBtZXRob2QsIHdpbGwgYmUgcmVtb3ZlZCBpbiB1cGNvbWluZyB1cGRhdGVzLlxuICAgKiBUZW1wIG1ldGhvZCB1bnRpbCBgdmVyaWZ5VG9rZW5SZXF1ZXN0YCB3aWxsIGJlIGNvbXBsZXRlbHkgcmVwbGFjZWQgd2l0aCBza2lwUmVxdWVzdFxuICAgKi9cbiAgcHJpdmF0ZSBleGVjKG1ldGhvZDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldDxBdXRoU2VydmljZT4oQVVUSF9TRVJWSUNFKTtcblxuICAgIGlmICh0eXBlb2YgYXV0aFNlcnZpY2VbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGF1dGhTZXJ2aWNlW21ldGhvZF0oLi4uYXJncyk7XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgUHVibGljR3VhcmQgfSBmcm9tICcuL3B1YmxpYy5ndWFyZCc7XG5pbXBvcnQgeyBQcm90ZWN0ZWRHdWFyZCB9IGZyb20gJy4vcHJvdGVjdGVkLmd1YXJkJztcbmltcG9ydCB7IEF1dGhJbnRlcmNlcHRvciB9IGZyb20gJy4vYXV0aC5pbnRlcmNlcHRvcic7XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIFB1YmxpY0d1YXJkLFxuICAgIFByb3RlY3RlZEd1YXJkLFxuICAgIEF1dGhJbnRlcmNlcHRvcixcbiAgICB7XG4gICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgIHVzZUNsYXNzOiBBdXRoSW50ZXJjZXB0b3IsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQXV0aE1vZHVsZSB7XG59XG4iXSwibmFtZXMiOlsiSW5qZWN0aW9uVG9rZW4iLCJyb3V0ZXIiLCJtYXAiLCJJbmplY3RhYmxlIiwiSW5qZWN0IiwiUm91dGVyIiwiU3ViamVjdCIsInN3aXRjaE1hcCIsImNhdGNoRXJyb3IiLCJ0aHJvd0Vycm9yIiwiZmlyc3QiLCJodHRwIiwiSHR0cENsaWVudCIsIkluamVjdG9yIiwiTmdNb2R1bGUiLCJIVFRQX0lOVEVSQ0VQVE9SUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFNQTs7OztRQUFBO1NBK0RDO1FBQUQsa0JBQUM7SUFBRCxDQUFDOzs7Ozs7QUNyRUQ7QUFFQSxRQUFhLFlBQVksR0FBRyxJQUFJQSxtQkFBYyxDQUFDLGNBQWMsQ0FBQzs7QUFDOUQsUUFBYSx3QkFBd0IsR0FBRyxJQUFJQSxtQkFBYyxDQUFDLDBCQUEwQixDQUFDOztBQUN0RixRQUFhLDJCQUEyQixHQUFHLElBQUlBLG1CQUFjLENBQUMsNkJBQTZCLENBQUM7Ozs7OztBQ0o1Rjs7Ozs7Ozs7QUFzQkE7UUFHRSxxQkFDZ0MsV0FBd0IsRUFDVCx3QkFBZ0MsRUFDckVDLFNBQWM7WUFGUSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtZQUNULDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBUTtZQUNyRSxXQUFNLEdBQU5BLFNBQU0sQ0FBUTtTQUNwQjs7Ozs7Ozs7OztRQUtHLGlDQUFXOzs7Ozs7WUFBbEIsVUFDRSxNQUE4QixFQUM5QixLQUEwQjtnQkFGNUIsaUJBY0M7Z0JBVkMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRTtxQkFDbkMsSUFBSSxDQUFDQyxhQUFHLENBQUMsVUFBQyxZQUFxQjtvQkFDOUIsSUFBSSxZQUFZLElBQUksQ0FBQyxLQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUNoRCxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO3dCQUU3QyxPQUFPLEtBQUssQ0FBQztxQkFDZDtvQkFFRCxPQUFPLElBQUksQ0FBQztpQkFDYixDQUFDLENBQUMsQ0FBQzthQUNQOzs7Ozs7Ozs7O1FBS00s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