/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Essential service for authentication
 * @abstract
 */
export class AuthService {
}
if (false) {
    /**
     * Check, if user already authorized.
     * Should return Observable with true or false values
     * @abstract
     * @return {?}
     */
    AuthService.prototype.isAuthorized = function () { };
    /**
     * Get access token
     * Should return access token in Observable from e.g.
     * localStorage
     * @abstract
     * @return {?}
     */
    AuthService.prototype.getAccessToken = function () { };
    /**
     * Function, that should perform refresh token
     * Should be successfully completed so interceptor
     * can execute pending requests or retry original one
     * @abstract
     * @return {?}
     */
    AuthService.prototype.refreshToken = function () { };
    /**
     * Function, checks response of failed request to determine,
     * whether token be refreshed or not.
     *
     * Essentially checks status
     * @abstract
     * @param {?} response
     * @return {?}
     */
    AuthService.prototype.refreshShouldHappen = function (response) { };
    /**
     * Verify that outgoing request is refresh-token,
     * so interceptor won't intercept this request
     * @abstract
     * @param {?} request
     * @return {?}
     */
    AuthService.prototype.verifyRefreshToken = function (request) { };
    /**
     * Checks if request must be skipped by interceptor.
     * Useful for requests such as request token which doesn't require token in headers
     * @abstract
     * @param {?} request
     * @return {?}
     */
    AuthService.prototype.skipRequest = function (request) { };
    /**
     * Add token to headers, dependent on server
     * set-up, by default adds a bearer token.
     * Called by interceptor.
     * To change behavior, override this method.
     * @abstract
     * @param {?} token
     * @return {?}
     */
    AuthService.prototype.getHeaders = function (token) { };
    /**
     * Saves last interrupted url inside of the service for further reusage,
     * e.g. restoring interrupted page after logging in
     * @abstract
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.setInterruptedUrl = function (url) { };
    /**
     * Verify that outgoing request is refresh-token,
     * so interceptor won't intercept this request
     * @deprecated Due to illogical meaning/functionality this method is deprecated
     * @see verifyRefreshToken
     * @abstract
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.verifyTokenRequest = function (url) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWF1dGgvIiwic291cmNlcyI6WyJhdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFNQSxNQUFNLE9BQWdCLFdBQVc7Q0ErRGhDOzs7Ozs7OztJQXpEQyxxREFBb0Q7Ozs7Ozs7O0lBT3BELHVEQUFxRDs7Ozs7Ozs7SUFPckQscURBQWdEOzs7Ozs7Ozs7O0lBUWhELG9FQUEwRTs7Ozs7Ozs7SUFNMUUsa0VBQXdFOzs7Ozs7OztJQU14RSwyREFBaUU7Ozs7Ozs7Ozs7SUFRakUsd0RBQWtGOzs7Ozs7OztJQU1sRiw2REFBc0Q7Ozs7Ozs7Ozs7SUFRdEQsOERBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QsIEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEVzc2VudGlhbCBzZXJ2aWNlIGZvciBhdXRoZW50aWNhdGlvblxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXV0aFNlcnZpY2Uge1xuXG4gIC8qKlxuICAgKiBDaGVjaywgaWYgdXNlciBhbHJlYWR5IGF1dGhvcml6ZWQuXG4gICAqIFNob3VsZCByZXR1cm4gT2JzZXJ2YWJsZSB3aXRoIHRydWUgb3IgZmFsc2UgdmFsdWVzXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgaXNBdXRob3JpemVkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIEdldCBhY2Nlc3MgdG9rZW5cbiAgICogU2hvdWxkIHJldHVybiBhY2Nlc3MgdG9rZW4gaW4gT2JzZXJ2YWJsZSBmcm9tIGUuZy5cbiAgICogbG9jYWxTdG9yYWdlXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0QWNjZXNzVG9rZW4oKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiwgdGhhdCBzaG91bGQgcGVyZm9ybSByZWZyZXNoIHRva2VuXG4gICAqIFNob3VsZCBiZSBzdWNjZXNzZnVsbHkgY29tcGxldGVkIHNvIGludGVyY2VwdG9yXG4gICAqIGNhbiBleGVjdXRlIHBlbmRpbmcgcmVxdWVzdHMgb3IgcmV0cnkgb3JpZ2luYWwgb25lXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVmcmVzaFRva2VuKCk6IE9ic2VydmFibGU8YW55PjtcblxuICAvKipcbiAgICogRnVuY3Rpb24sIGNoZWNrcyByZXNwb25zZSBvZiBmYWlsZWQgcmVxdWVzdCB0byBkZXRlcm1pbmUsXG4gICAqIHdoZXRoZXIgdG9rZW4gYmUgcmVmcmVzaGVkIG9yIG5vdC5cbiAgICpcbiAgICogRXNzZW50aWFsbHkgY2hlY2tzIHN0YXR1c1xuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlZnJlc2hTaG91bGRIYXBwZW4ocmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogVmVyaWZ5IHRoYXQgb3V0Z29pbmcgcmVxdWVzdCBpcyByZWZyZXNoLXRva2VuLFxuICAgKiBzbyBpbnRlcmNlcHRvciB3b24ndCBpbnRlcmNlcHQgdGhpcyByZXF1ZXN0XG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgdmVyaWZ5UmVmcmVzaFRva2VuPyhyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHJlcXVlc3QgbXVzdCBiZSBza2lwcGVkIGJ5IGludGVyY2VwdG9yLlxuICAgKiBVc2VmdWwgZm9yIHJlcXVlc3RzIHN1Y2ggYXMgcmVxdWVzdCB0b2tlbiB3aGljaCBkb2Vzbid0IHJlcXVpcmUgdG9rZW4gaW4gaGVhZGVyc1xuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHNraXBSZXF1ZXN0PyhyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQWRkIHRva2VuIHRvIGhlYWRlcnMsIGRlcGVuZGVudCBvbiBzZXJ2ZXJcbiAgICogc2V0LXVwLCBieSBkZWZhdWx0IGFkZHMgYSBiZWFyZXIgdG9rZW4uXG4gICAqIENhbGxlZCBieSBpbnRlcmNlcHRvci5cbiAgICogVG8gY2hhbmdlIGJlaGF2aW9yLCBvdmVycmlkZSB0aGlzIG1ldGhvZC5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRIZWFkZXJzPyh0b2tlbjogc3RyaW5nKTogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW10gfTtcblxuICAvKipcbiAgICogU2F2ZXMgbGFzdCBpbnRlcnJ1cHRlZCB1cmwgaW5zaWRlIG9mIHRoZSBzZXJ2aWNlIGZvciBmdXJ0aGVyIHJldXNhZ2UsXG4gICAqIGUuZy4gcmVzdG9yaW5nIGludGVycnVwdGVkIHBhZ2UgYWZ0ZXIgbG9nZ2luZyBpblxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHNldEludGVycnVwdGVkVXJsPyh1cmw6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFZlcmlmeSB0aGF0IG91dGdvaW5nIHJlcXVlc3QgaXMgcmVmcmVzaC10b2tlbixcbiAgICogc28gaW50ZXJjZXB0b3Igd29uJ3QgaW50ZXJjZXB0IHRoaXMgcmVxdWVzdFxuICAgKiBAZGVwcmVjYXRlZCBEdWUgdG8gaWxsb2dpY2FsIG1lYW5pbmcvZnVuY3Rpb25hbGl0eSB0aGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkXG4gICAqIEBzZWUgdmVyaWZ5UmVmcmVzaFRva2VuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgdmVyaWZ5VG9rZW5SZXF1ZXN0Pyh1cmw6IHN0cmluZyk6IGJvb2xlYW47XG59XG4iXX0=