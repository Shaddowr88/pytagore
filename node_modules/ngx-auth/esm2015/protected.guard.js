/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Router } from '@angular/router';
import { map } from 'rxjs/operators';
import { AuthService } from './auth.service';
import { AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI } from './tokens';
/**
 * Guard, checks access token availability and allows or disallows access to page,
 * and redirects out
 *
 * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }
 *
 * @export
 */
export class ProtectedGuard {
    /**
     * @param {?} authService
     * @param {?} publicFallbackPageUri
     * @param {?} router
     */
    constructor(authService, publicFallbackPageUri, router) {
        this.authService = authService;
        this.publicFallbackPageUri = publicFallbackPageUri;
        this.router = router;
    }
    /**
     * CanActivate handler
     * @param {?} _route
     * @param {?} state
     * @return {?}
     */
    canActivate(_route, state) {
        return this.authService.isAuthorized()
            .pipe(map((isAuthorized) => {
            if (!isAuthorized && !this.isPublicPage(state)) {
                if (this.authService.setInterruptedUrl) {
                    this.authService.setInterruptedUrl(state.url);
                }
                this.navigate(this.publicFallbackPageUri);
                return false;
            }
            return true;
        }));
    }
    /**
     * CanActivateChild handler
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivateChild(route, state) {
        return this.canActivate(route, state);
    }
    /**
     * Check, if current page is public fallback page
     * @param {?} state
     * @return {?}
     */
    isPublicPage(state) {
        return state.url === this.publicFallbackPageUri;
    }
    /**
     * Navigate away from the app / path
     * @param {?} url
     * @return {?}
     */
    navigate(url) {
        if (url.startsWith('http')) {
            window.location.href = url;
        }
        else {
            this.router.navigateByUrl(url);
        }
    }
}
ProtectedGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProtectedGuard.ctorParameters = () => [
    { type: AuthService, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: String, decorators: [{ type: Inject, args: [PUBLIC_FALLBACK_PAGE_URI,] }] },
    { type: Router }
];
if (false) {
    /** @type {?} */
    ProtectedGuard.prototype.authService;
    /** @type {?} */
    ProtectedGuard.prototype.publicFallbackPageUri;
    /** @type {?} */
    ProtectedGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdGVjdGVkLmd1YXJkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWF1dGgvIiwic291cmNlcyI6WyJwcm90ZWN0ZWQuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFDTCxNQUFNLEVBS1AsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxVQUFVLENBQUM7Ozs7Ozs7OztBQVdsRSxNQUFNLE9BQU8sY0FBYzs7Ozs7O0lBRXpCLFlBQytCLFdBQXdCLEVBQ1gscUJBQTZCLEVBQy9ELE1BQWM7UUFGTyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUNYLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBUTtRQUMvRCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ3JCLENBQUM7Ozs7Ozs7SUFLRyxXQUFXLENBQ2hCLE1BQThCLEVBQzlCLEtBQTBCO1FBRTFCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUU7YUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQXFCLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDOUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFO29CQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDL0M7Z0JBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztnQkFFMUMsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Ozs7Ozs7SUFLTSxnQkFBZ0IsQ0FDckIsS0FBNkIsRUFDN0IsS0FBMEI7UUFFMUIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFLTyxZQUFZLENBQUMsS0FBMEI7UUFDN0MsT0FBTyxLQUFLLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUNsRCxDQUFDOzs7Ozs7SUFLTyxRQUFRLENBQUMsR0FBVztRQUMxQixJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1NBQzVCO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7OztZQTFERixVQUFVOzs7O1lBWEYsV0FBVyx1QkFlZixNQUFNLFNBQUMsWUFBWTt5Q0FDbkIsTUFBTSxTQUFDLHdCQUF3QjtZQXpCbEMsTUFBTTs7OztJQXdCSixxQ0FBcUQ7O0lBQ3JELCtDQUF1RTs7SUFDdkUsZ0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBSb3V0ZXIsXG4gIENhbkFjdGl2YXRlLFxuICBDYW5BY3RpdmF0ZUNoaWxkLFxuICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90XG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgQVVUSF9TRVJWSUNFLCBQVUJMSUNfRkFMTEJBQ0tfUEFHRV9VUkkgfSBmcm9tICcuL3Rva2Vucyc7XG5cbi8qKlxuICogR3VhcmQsIGNoZWNrcyBhY2Nlc3MgdG9rZW4gYXZhaWxhYmlsaXR5IGFuZCBhbGxvd3Mgb3IgZGlzYWxsb3dzIGFjY2VzcyB0byBwYWdlLFxuICogYW5kIHJlZGlyZWN0cyBvdXRcbiAqXG4gKiB1c2FnZTogeyBwYXRoOiAndGVzdCcsIGNvbXBvbmVudDogVGVzdENvbXBvbmVudCwgY2FuQWN0aXZhdGU6IFsgQXV0aEd1YXJkIF0gfVxuICpcbiAqIEBleHBvcnRcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByb3RlY3RlZEd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoQVVUSF9TRVJWSUNFKXByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLFxuICAgIEBJbmplY3QoUFVCTElDX0ZBTExCQUNLX1BBR0VfVVJJKSBwcml2YXRlIHB1YmxpY0ZhbGxiYWNrUGFnZVVyaTogc3RyaW5nLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBDYW5BY3RpdmF0ZSBoYW5kbGVyXG4gICAqL1xuICBwdWJsaWMgY2FuQWN0aXZhdGUoXG4gICAgX3JvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmF1dGhTZXJ2aWNlLmlzQXV0aG9yaXplZCgpXG4gICAgICAucGlwZShtYXAoKGlzQXV0aG9yaXplZDogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAoIWlzQXV0aG9yaXplZCAmJiAhdGhpcy5pc1B1YmxpY1BhZ2Uoc3RhdGUpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuYXV0aFNlcnZpY2Uuc2V0SW50ZXJydXB0ZWRVcmwpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aFNlcnZpY2Uuc2V0SW50ZXJydXB0ZWRVcmwoc3RhdGUudXJsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm5hdmlnYXRlKHRoaXMucHVibGljRmFsbGJhY2tQYWdlVXJpKTtcblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbkFjdGl2YXRlQ2hpbGQgaGFuZGxlclxuICAgKi9cbiAgcHVibGljIGNhbkFjdGl2YXRlQ2hpbGQoXG4gICAgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuY2FuQWN0aXZhdGUocm91dGUsIHN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjaywgaWYgY3VycmVudCBwYWdlIGlzIHB1YmxpYyBmYWxsYmFjayBwYWdlXG4gICAqL1xuICBwcml2YXRlIGlzUHVibGljUGFnZShzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzdGF0ZS51cmwgPT09IHRoaXMucHVibGljRmFsbGJhY2tQYWdlVXJpO1xuICB9XG5cbiAgLyoqXG4gICAqIE5hdmlnYXRlIGF3YXkgZnJvbSB0aGUgYXBwIC8gcGF0aFxuICAgKi9cbiAgcHJpdmF0ZSBuYXZpZ2F0ZSh1cmw6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh1cmwuc3RhcnRzV2l0aCgnaHR0cCcpKSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh1cmwpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=