/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Essential service for authentication
 * @abstract
 */
var /**
 * Essential service for authentication
 * @abstract
 */
AuthService = /** @class */ (function () {
    function AuthService() {
    }
    return AuthService;
}());
/**
 * Essential service for authentication
 * @abstract
 */
export { AuthService };
if (false) {
    /**
     * Check, if user already authorized.
     * Should return Observable with true or false values
     * @abstract
     * @return {?}
     */
    AuthService.prototype.isAuthorized = function () { };
    /**
     * Get access token
     * Should return access token in Observable from e.g.
     * localStorage
     * @abstract
     * @return {?}
     */
    AuthService.prototype.getAccessToken = function () { };
    /**
     * Function, that should perform refresh token
     * Should be successfully completed so interceptor
     * can execute pending requests or retry original one
     * @abstract
     * @return {?}
     */
    AuthService.prototype.refreshToken = function () { };
    /**
     * Function, checks response of failed request to determine,
     * whether token be refreshed or not.
     *
     * Essentially checks status
     * @abstract
     * @param {?} response
     * @return {?}
     */
    AuthService.prototype.refreshShouldHappen = function (response) { };
    /**
     * Verify that outgoing request is refresh-token,
     * so interceptor won't intercept this request
     * @abstract
     * @param {?} request
     * @return {?}
     */
    AuthService.prototype.verifyRefreshToken = function (request) { };
    /**
     * Checks if request must be skipped by interceptor.
     * Useful for requests such as request token which doesn't require token in headers
     * @abstract
     * @param {?} request
     * @return {?}
     */
    AuthService.prototype.skipRequest = function (request) { };
    /**
     * Add token to headers, dependent on server
     * set-up, by default adds a bearer token.
     * Called by interceptor.
     * To change behavior, override this method.
     * @abstract
     * @param {?} token
     * @return {?}
     */
    AuthService.prototype.getHeaders = function (token) { };
    /**
     * Saves last interrupted url inside of the service for further reusage,
     * e.g. restoring interrupted page after logging in
     * @abstract
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.setInterruptedUrl = function (url) { };
    /**
     * Verify that outgoing request is refresh-token,
     * so interceptor won't intercept this request
     * @deprecated Due to illogical meaning/functionality this method is deprecated
     * @see verifyRefreshToken
     * @abstract
     * @param {?} url
     * @return {?}
     */
    AuthService.prototype.verifyTokenRequest = function (url) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWF1dGgvIiwic291cmNlcyI6WyJhdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFNQTs7Ozs7SUFBQTtJQStEQSxDQUFDO0lBQUQsa0JBQUM7QUFBRCxDQUFDLEFBL0RELElBK0RDOzs7Ozs7Ozs7Ozs7O0lBekRDLHFEQUFvRDs7Ozs7Ozs7SUFPcEQsdURBQXFEOzs7Ozs7OztJQU9yRCxxREFBZ0Q7Ozs7Ozs7Ozs7SUFRaEQsb0VBQTBFOzs7Ozs7OztJQU0xRSxrRUFBd0U7Ozs7Ozs7O0lBTXhFLDJEQUFpRTs7Ozs7Ozs7OztJQVFqRSx3REFBa0Y7Ozs7Ozs7O0lBTWxGLDZEQUFzRDs7Ozs7Ozs7OztJQVF0RCw4REFBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogRXNzZW50aWFsIHNlcnZpY2UgZm9yIGF1dGhlbnRpY2F0aW9uXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBdXRoU2VydmljZSB7XG5cbiAgLyoqXG4gICAqIENoZWNrLCBpZiB1c2VyIGFscmVhZHkgYXV0aG9yaXplZC5cbiAgICogU2hvdWxkIHJldHVybiBPYnNlcnZhYmxlIHdpdGggdHJ1ZSBvciBmYWxzZSB2YWx1ZXNcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBpc0F1dGhvcml6ZWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogR2V0IGFjY2VzcyB0b2tlblxuICAgKiBTaG91bGQgcmV0dXJuIGFjY2VzcyB0b2tlbiBpbiBPYnNlcnZhYmxlIGZyb20gZS5nLlxuICAgKiBsb2NhbFN0b3JhZ2VcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRBY2Nlc3NUb2tlbigpOiBPYnNlcnZhYmxlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uLCB0aGF0IHNob3VsZCBwZXJmb3JtIHJlZnJlc2ggdG9rZW5cbiAgICogU2hvdWxkIGJlIHN1Y2Nlc3NmdWxseSBjb21wbGV0ZWQgc28gaW50ZXJjZXB0b3JcbiAgICogY2FuIGV4ZWN1dGUgcGVuZGluZyByZXF1ZXN0cyBvciByZXRyeSBvcmlnaW5hbCBvbmVcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWZyZXNoVG9rZW4oKTogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiwgY2hlY2tzIHJlc3BvbnNlIG9mIGZhaWxlZCByZXF1ZXN0IHRvIGRldGVybWluZSxcbiAgICogd2hldGhlciB0b2tlbiBiZSByZWZyZXNoZWQgb3Igbm90LlxuICAgKlxuICAgKiBFc3NlbnRpYWxseSBjaGVja3Mgc3RhdHVzXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVmcmVzaFNob3VsZEhhcHBlbihyZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBWZXJpZnkgdGhhdCBvdXRnb2luZyByZXF1ZXN0IGlzIHJlZnJlc2gtdG9rZW4sXG4gICAqIHNvIGludGVyY2VwdG9yIHdvbid0IGludGVyY2VwdCB0aGlzIHJlcXVlc3RcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB2ZXJpZnlSZWZyZXNoVG9rZW4/KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcmVxdWVzdCBtdXN0IGJlIHNraXBwZWQgYnkgaW50ZXJjZXB0b3IuXG4gICAqIFVzZWZ1bCBmb3IgcmVxdWVzdHMgc3VjaCBhcyByZXF1ZXN0IHRva2VuIHdoaWNoIGRvZXNuJ3QgcmVxdWlyZSB0b2tlbiBpbiBoZWFkZXJzXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3Qgc2tpcFJlcXVlc3Q/KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBZGQgdG9rZW4gdG8gaGVhZGVycywgZGVwZW5kZW50IG9uIHNlcnZlclxuICAgKiBzZXQtdXAsIGJ5IGRlZmF1bHQgYWRkcyBhIGJlYXJlciB0b2tlbi5cbiAgICogQ2FsbGVkIGJ5IGludGVyY2VwdG9yLlxuICAgKiBUbyBjaGFuZ2UgYmVoYXZpb3IsIG92ZXJyaWRlIHRoaXMgbWV0aG9kLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEhlYWRlcnM/KHRva2VuOiBzdHJpbmcpOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXSB9O1xuXG4gIC8qKlxuICAgKiBTYXZlcyBsYXN0IGludGVycnVwdGVkIHVybCBpbnNpZGUgb2YgdGhlIHNlcnZpY2UgZm9yIGZ1cnRoZXIgcmV1c2FnZSxcbiAgICogZS5nLiByZXN0b3JpbmcgaW50ZXJydXB0ZWQgcGFnZSBhZnRlciBsb2dnaW5nIGluXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3Qgc2V0SW50ZXJydXB0ZWRVcmw/KHVybDogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogVmVyaWZ5IHRoYXQgb3V0Z29pbmcgcmVxdWVzdCBpcyByZWZyZXNoLXRva2VuLFxuICAgKiBzbyBpbnRlcmNlcHRvciB3b24ndCBpbnRlcmNlcHQgdGhpcyByZXF1ZXN0XG4gICAqIEBkZXByZWNhdGVkIER1ZSB0byBpbGxvZ2ljYWwgbWVhbmluZy9mdW5jdGlvbmFsaXR5IHRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWRcbiAgICogQHNlZSB2ZXJpZnlSZWZyZXNoVG9rZW5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB2ZXJpZnlUb2tlblJlcXVlc3Q/KHVybDogc3RyaW5nKTogYm9vbGVhbjtcbn1cbiJdfQ==